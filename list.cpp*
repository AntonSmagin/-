#include "stdafx.h"
#include "list.h"
#include <iostream>
#include <clocale>
#include <ctype.h>
#include <cstring>


using namespace std;

Queue *First1(int val) // Создание первого элемента
{
	Queue *pv = new Queue;
	pv->val = val; //(*pv).val
	pv->next = NULL;
	return pv;
}
List *First2(int val) // Создание первого элемента
{
	List *pv = new List;
	pv->val = val; //(*pv).val
	pv->next = NULL;
	return pv;
}

void add(Queue **pend, int val) // Добавление элемента в конец очереди 
{
	Queue *pv = new Queue;
	pv->val = val;
	pv->next = NULL;
	(*pend)->next = pv;
	*pend = pv;
}

List* find(List *const pbeg, int val) // Находит элемент и возвращает адресс указывающий на содержимое этого элемента
{
	List *pv = pbeg;
	while (pv) {
		if (pv->val == val) break;
		pv = pv->next;
	}
	return pv; // добавить NULL,если не найдем элемент с заданным ключем
}

int del(Queue **pbeg) //Удаление первого элемента 
{

	int temp = (*pbeg)->val;
	Queue *pv = *pbeg;
	*pbeg = (*pbeg)->next;
	delete pv;
	return temp;
}
int del(List **pbeg) //Удаление первого элемента 
{

	int temp = (*pbeg)->val;
	List *pv = *pbeg;
	*pbeg = (*pbeg)->next;
	delete pv;
	return temp;
}

bool del_key(List **pbeg, int key) // Удаление элемента по ключу
{
	List *pkey = find(*pbeg, key);  // запоминаем адрес указывающий на 
	if (pkey != NULL) {
		if (pkey == *pbeg)
			*pbeg = (*pbeg)->next;
		else {
			List *pv = *pbeg;
			while (pkey != pv->next)  // pv верменный файл 
				pv = pv->next;
			(pv)->next = pkey->next;
		}
		delete pkey;
		return true;
	}
	return false;
}
void insert_after(List*const pbeg, int key, int el) // Добавление элемента после ключа
{
	List*pkey = NULL;

	if ((pkey = find(pbeg, key)) != NULL)
	{
		List *pv = new List;
		pv->val = el;
		pv->next = pkey->next;
		pkey->next = pv;
	}
}
void insert_before(List **pbeg, int key, int el) // Добавление элемента до ключа
{
	List *pkey = NULL;
	if ((pkey = find(*pbeg, key)) != NULL)
	{
		List *pv = new List;
		pv->val = el;
		if (pkey == *pbeg)
		{
			pv->next = *pbeg;
			*pbeg = pv;
	
		}

		else
		{
			pv->next = pkey;
			List*k = *pbeg;
			while (k->next != pkey)
				k = k->next;
			k->next = pv;
		}
	}
}


void print(Queue **pbeg) //Печатаем очередь
{
	Queue *tmp = (*pbeg)->next;

	printf("%d ", (*pbeg)->val);
	while (tmp != NULL)
	{
		printf("%d ", tmp->val);
		tmp = tmp->next;
	}
	cout << endl;

}
void print(List **pbeg) //Печатаем очередь
{
	List *tmp = (*pbeg)->next;

	printf("%d ", (*pbeg)->val);
	while (tmp != NULL)
	{
		printf("%d ", tmp->val);
		tmp = tmp->next;
	}
	cout << endl;

}
void menu(){
setlocale(LC_ALL, "Russian");
char f;
do
{
	cout << "***QUEUE***" << endl << endl;
	cout << "Выбирите режим программы:\n";
	cout << "1.Очередь\n";
	cout << "2.Список\n\n";

	cout << "Для продолжения выберите цифру и нажмите ENTER\n";
	cout << "Для выхода введите 0\n";
	cin >> f;
	isdigit(f);
	int c;
	c = f - '0';
	if (c >= 0 && c < 3)
	{

		switch (c)
		{
		case 1:

			menu1();

		case 2:

			menu2();

		}

	}
	else
	{
		cout << endl;
		cout << "Неверное значение! Введиите число от 0 до 2" << endl << endl;
		system("pause");
		cout << endl;
		system("cls");


	}
} while (1);
}

void menu1()
{
	setlocale(LC_ALL, "Russian");

	Queue *pbeg = NULL;
	Queue *pend = NULL;
	{

		char t1;
		int first_el;
		int el = 0;
		int key = 0;
		do
		{
			cout << "***QUEUE***" << endl << endl;
			cout << "1. Добавить первый элемент в очередь\n";
			cout << "2. Добавить новый элемент в очередь\n";
			cout << "3. Удалить первый элемент из очереди\n";
     		cout << "4. Распечатать элемент(ы) очереди\n\n";

			cout << "Для продолжения выберите цифру и нажмите ENTER\n";
			cout << "Для выхода введите 0\n";
			cout << "Для возврата в предыдущее меню введите 9 Внимание! Данные будут удалены!\n";
			cin >> t1;
			isdigit(t1);
			int c;
			c = t1 - '0';
			if (c >= 0 && c < 5)
			{

				switch (c)
				{
				case 1:
					if (pbeg == NULL)
					{
						cout << "Создайте первый элемент\n\n";
						cin >> first_el;

						pbeg = First1(first_el);
						pend = pbeg;
					}
					else
					{
						cout << "Ошибка! Первый элемент существует!\n\n";
						system("pause");
					}
					system("CLS");
					break;

				case 2:
					if (pbeg != NULL) {
						cout << "Напишите новый элемент\n\n";
						cin >> el;
						add(&pend, el);
					}
					else {
						cout << "Ошибка! Нужно добавить первый элемент!\n\n";
						system("pause");
					}
					system("CLS");
					break;
				case 3:
					if (pbeg != NULL) {
						del(&pbeg);
						cout << "Элемент был удален из очереди\n\n";
					}
					else {
						cout << endl;
						cout << "Ошибка! Очередь пуста!\n\n";
					}
					system("pause");
					cout << endl;
					system("cls");
					break;
				case 4:
					cout << "Распечатаная очередь\n\n";
					print(&pbeg);
					cout << endl;
					system("pause");
					cout << endl;
					system("cls");
					break;
				case 9:
					
					
					system("cls");
					menu();
					break;


				}

			}
			else
			{
				cout << endl;
				cout << "Неверное значение! Введиите число от 1 до 4" << endl << endl;
				system("pause");
				cout << endl;
				system("cls");


			}
		} while (1);


	}

}
void menu2()
{
	setlocale(LC_ALL, "Russian");

	List *pbeg = NULL;
	List *pend = NULL;
	{

		char t2;
		int first_el;
		int el = 0;
		int key = 0;
		do
		{
			cout << "***QUEUE***" << endl << endl;
			cout << "1. Добавить первый элемент в список\n";
			cout << "2. Добавить элемент в список после заданного ключа\n";
			cout << "3. Добавить элемент в список до заданного ключа\n";
			cout << "4. Удалить элемент по ключу в списке\n";
			cout << "5. Распечатать элемент(ы) списка(очереди)\n\n";

			cout << "Для продолжения выберите цифру и нажмите ENTER\n";
			cout << "Для выхода введите 0\n";
			cout << "Для возврата в предыдущее меню введите 9 Внимание! Данные будут удалены!\n";
			cin >> t2;
			isdigit(t2);
			int c;
			c = t2 - '0';

			if (c >= 0 && c < 6)

			{

				switch (c)
				{
				case 1:
					if (pbeg == NULL)
					{
						cout << "Создайте первый элемент\n\n";
						cin >> first_el;

						pbeg = First2(first_el);
						pend = pbeg;
					}
					else
					{
						cout << "Ошибка! Первый элемент существует!\n\n";
						system("pause");
					}
					system("CLS");
					break;
				case 2:
					if (pbeg != NULL) {
						cout << "Напишите элемент после которого хотите добавить новый элемент\n\n";
						cin >> key;
						cout << "Напишите новый элемент\n\n";
						cin >> el;

						insert_after(pbeg, key, el);
					}
					else {
						cout << "Ошибка! Нужно добавить первый элемент!\n\n";
						system("pause");
					}
					system("CLS");
					break;
				case 3:
					if (pbeg != NULL) {
						cout << "Напишите элемент перед которым хотите добавить новый элемент\n\n";
						cin >> key;
						cout << "Напишите новый элемент\n\n";
						cin >> el;

						insert_befor(&pbeg, key, el);
					}
					else {
						cout << "Ошибка! Нужно добавить первый элемент!\n\n";
						system("pause");
					}
					system("CLS");
					break;
				case 4:
					if (pbeg != NULL) {
						cout << "Напишите элемент который хотите удалить\n\n";
						cin >> key;
						del_key(&pbeg, key);
						cout << "Элемент был удален из очереди\n\n";
					}
					else {
						cout << endl;
						cout << "Ошибка! Очередь пуста!\n\n";
					}
					system("pause");
					cout << endl;
					system("cls");
					break;
				case 5:
					cout << "Распечатаная очередь\n\n";
					print(&pbeg);
					cout << endl;
					system("pause");
					cout << endl;
					system("cls");
					break;
				case 9:


					system("cls");
					menu();
					break;




				}

			}
			else
			{
				cout << endl;
				cout << "Неверное значение! Введиите число от 1 до 5" << endl << endl;
				system("pause");
				cout << endl;
				system("cls");


			}
		} while (1);


	}

}
